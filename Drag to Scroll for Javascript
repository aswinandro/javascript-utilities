Drag to scroll

User often uses the mouse to scroll in a scrollable container. In addition to that, some applications also allow user to scroll by dragging the element. You can see that feature implemented in a PDF viewer, Figma and many more.
This post shows you a simple way to archive that feature with vanilla JavaScript.
Assume that we have a scrollable container as below:
<div id="container" class="container">...</div>
The element must have at least two CSS properties:
.container {
    cursor: grab;
    overflow: auto;
}
The cursor: grab indicates that the element can be clicked and dragged.
Scroll to given position
As long as the element is scrollable, we can scroll it to given position by setting the scrollTop or scrollLeft property:
const ele = document.getElementById('container');
ele.scrollTop = 100;
ele.scrollLeft = 150;
Drag to scroll
The implementation is quite straightforward. By using the similar technique in the Make a draggable element post, we start with handling the mousedown event which occurs when user clicks the element:
let pos = { top: 0, left: 0, x: 0, y: 0 };

const mouseDownHandler = function (e) {
    pos = {
        // The current scroll
        left: ele.scrollLeft,
        top: ele.scrollTop,
        // Get the current mouse position
        x: e.clientX,
        y: e.clientY,
    };

    document.addEventListener('mousemove', mouseMoveHandler);
    document.addEventListener('mouseup', mouseUpHandler);
};
Tip
This post uses the Attach event handlers inside other handlers tip
pos stores the current scroll and mouse positions. When user moves the mouse, we calculate how far it has been moved, and then scroll to the element to the same position:
const mouseMoveHandler = function (e) {
    // How far the mouse has been moved
    const dx = e.clientX - pos.x;
    const dy = e.clientY - pos.y;

    // Scroll the element
    ele.scrollTop = pos.top - dy;
    ele.scrollLeft = pos.left - dx;
};
Good practice
As you see above, the left, top, x, and y properties are related to each other. It's better to encapsulate them in a single variable pos instead of creating four variables.
Last but not least, we can improve the user experience by setting some CSS properties when user starts moving the mouse:
const mouseDownHandler = function(e) {
    // Change the cursor and prevent user from selecting the text
    ele.style.cursor = 'grabbing';
    ele.style.userSelect = 'none';
    ...
};
These CSS properties are reset when the mouse is released:
const mouseUpHandler = function () {
    document.removeEventListener('mousemove', mouseMoveHandler);
    document.removeEventListener('mouseup', mouseUpHandler);

    ele.style.cursor = 'grab';
    ele.style.removeProperty('user-select');
};
